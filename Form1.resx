<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAA47AAAOOwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBSmMATlpuAEhS
        ZgBASWMBP0dgAj1FXgI8Q1sDOkFZAjg9VQA3PFMAOkBYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBJ
        YwBASWMAQEljAEBIYwBASGMAPkdhADg+UwA4PlQANz5VAzc+VAE3PlQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABDSmIAQUpjAD9FWwA/RVoAQEhfDUBHXSY+RVwyPENZNjxCVxs5Q2EANjxVATc9UgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAD9IYwBBSmQCQUpjAEFKYzJASWTuPkdj/T1FYf47Q17/OkFa+jg/VqU2PVEMNT1QAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBJYwNASWEAQElhSj9JZv89R2j8O0Vk/jlCYf43QF78Nj5Y/zc8
        U5U3PVMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABra2sAa2trAGtr
        awBra2sAa2trAGtrawBra2sAa2trAGtrawBASWMAP0hjBEBIYgBASGKJPkhm/zxGZvo6RGL/OEFf/zc/
        XP00PFn/NTtT3jY7SQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABra2sAa2trAGpq
        agBra2sBbGxsBHNzcwOZmZkAtra2AHJycgNsbGwDcXFxAFBWaQA/R2EEQEdgAD9HYGE+R2T/O0Vl/DpD
        Yf84QF7/Nj5b/jQ7V/80OlHlNTpKEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa2trAG1t
        bQBtbW0AbGxsAm9vbwFubm4Ab29vAAAAAABwcHAAcHBwAHBwcABsbGwCdHR0AD9HXwQ/R14AP0deVz1G
        Yv87RGP8OUJf/zc/XP81PVn9MzpW/zQ6UM4sQHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABra2sAa2trAGtrawFkZGQAZWVlDW1tbW1ubm7Cbm5u5W5ubuZubm69a2trQnZ2dgBpa28CO0RhAj1G
        YQA+R2CyPEVj/zpDYvw4QV7/Nj5b/zQ8WPszOlT/NDlPmDQ6TgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGpqagBsbGwCa2trAGpqajRubm7obm5u/25ubrpvb2+GbGxsi25ubstvb2//bGxsY3Fw
        bgAAAAAAQUdbET5GYeo7RGP/OUJg/jdAXf81PVr/MztX/TM5Uf80OU1HNDlNAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAa2trAWRkZABgYGAJbm5u5G5ubsdra2sRAAAABCYmJgv///8Bd3d3AG1t
        bZdubm7xVFdgDk9SXgBBR1wcPUVg8zpDYv84QV/+Nj9c/zQ8Wf0zOlX/MzlPzjAyQQIvMDsAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGtrawBsbGwDbGxsAGxsbE1vb2//aGhoJlxcXABUVFQXRERE0UVF
        RX9fX18AampqMG5ubv9ra2s1YWNqAD9GXp08RWH/OUJh/DdAXf82Plr/MztY/DM6Uv80OU5YNDlNADQ5
        TwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsbGwAampqAGxsbANtbW0AbGxsUm5ubv9mZmYWkpKSADk5
        OQA8PDxOQEBA/z4+PolsbG03b29v/1NYZ5Q8RWHDPUZi/zpEY/45QV//Nz9c/zU8WfwzOlX/NDpPuzhA
        UQA2PVQBMzlQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqamoBYWFhAGNjYwZsbGyOcnJy/3Bw
        cKxwcHCPcHBwn29vb7FmZmb6aWlp/XBwcfV2dnX/S1Fm/zlDZP89Rmb9OkNh/zhAXv82Plv+NDtY/zQ6
        UfY0Ok0uNTpMADQ6TwI0OU8Aa2trAGtrawFra2sBa2trAWtrawFra2sBa2trAW1tbQVtbW0AbGxseXJy
        cv9ubm77bGxs/21tbf9tbW3/bW1t/3BwcP9vb2/9c3Nz/3h4d/9naXD8Rk1j/DhBX/85QmD/Nz9c/zU9
        Wvw1O1T/NTtPcDY7TwA1O1AENDlPADM5TwBra2sBa2trAWtrawBra2sAAAAAAAAAAABtbW0Ab29vBHJy
        cgBvb2+UcXFx/1ZWVvtRUVH8Tk5O+05OTvtOTk78Tk5O/1FRUf9aWVn+cXFy/3h4d/92dnX/T1Rj/zY+
        W/83P1z8NTxX/zU7UbI4PFYANjtUAjU8UgA0Ok8AMjhPAF9fXwBeXl4GYGBgEmBgYBFgYGARYGBgEWBg
        YBFjY2MVAAAAAW1tbZtwcHD/WFhY+01NTf8/Pz//QUFB/0BAQP8/Pz//SUlJ/1RUVP9kZGT/dnZ3/3Z2
        df9ycnP/PEJa/jI7Wf01O1T7NjtQMTc7TwA1O1ECMjhPADQ6UAAAAAAAKSkpAW5ubrhwcHD4cHBw7HBw
        cO5wcHDucHBw7nBwcO5wcHDscnJy+HFxcf9XV1f/VFRU/1NTU/9TU1P/U1NT/1NTU/9VVVX/VVVV/15e
        Xv92dnb/dHR0/3h4dv5SVmT7OT9W/zo/VKtBRVgAPkNXAzM6VAA1O1EAAAAAAAAAAABgYGATcXFx6nZ2
        dv91dXX+dnZ2/3Z2dv92dnb/dnZ2/3V1df92dnb/cXFx/1hYWP9RUVH/SkpK/0tLS/9LS0v/SkpK/1BQ
        UP9VVVX/X19f/3Z2dv91dXX+d3d3/3FxcfpmZmnXYGFlQmlpawBnaGoCOz5KADU7UgAAAAAAAAAAAGBg
        YBJwcHDndXV1/3V1df11dXX+dXV1/nV1df51dXX+dXV1/XZ2dv5xcXH/V1dX/0xMTP9AQED/QkJC/0JC
        Qv9AQED/SUlJ/1NTU/9nZ2f/eHh4+3V1df9mZmbnZ2dnLVhYWQBfX2ACsK6pAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAYGBgE3Fxcel2dnb/dXV1/XV1df51dXX9dnZ2/nZ2dv52dnb+dnZ2/nNzc/5cXFz+WVlZ/lpa
        Wv5ZWVn+WVlZ/lpaWv5aWlr+YmJi/nZ2dv50dHT/XFxc90BAQOxAQEDOQkJDe0JCQ21CQkIbQkJCAEJC
        QgEAAAAAAAAAAAAAAABcXFwIb29v2HJycv90dHT9dnZ2/3Nzc/9xcXH/cnJy/3Jycv9ycnL/cnJy/3Fx
        cf9xcXH/cXFx/3Fxcf9xcXH/cXFx/3Fxcf9zc3P9cnJy/2pqar00NDQrQkJCE0NDQ6hCQkL/QkJC70JC
        QipCQkIAQkJCAgAAAAAAAAAAAAAAAGZmZgBpaWkYZ2dnRm5ubu5xcXH/bGxso2ZmZitpaWk3aGhoNWlp
        aTVoaGg1aWlpNWpqajVqamo1ampqNWpqajVqamo1ampqNWdnZzVoaGg2ZmZmDWdnZwBgYGABQkJCAEJC
        QgxCQkIGQkJCAEJCQgA/Pz8AAAAAAAAAAAAAAAAAa2trAHd3dwBycnICaWlpK2NjYxpWVlYCVVVVAF5e
        XgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB+fn4AYmJiAGFhYQBlZWUCT09PAz09
        PQFCQkIDQkJCAEJCQgFCQkIBQkJCAEJCQgAAAAAAAAAAAAAAAABra2sAa2trAmtrawNra2sAa2trAGtr
        awFra2sDa2trA2trawNra2sDa2trA2trawNra2sDa2trA2trawNra2sDa2trA2trawNra2sDa2trA2tr
        awFtbW0ArKysAEJCQgBCQkIBQkJCAUJCQgBCQkIAQkJCAAAAAAAAAAAAAAAAAGtrawBra2sAa2trAGtr
        awJra2sCa2trAGtrawBra2sAa2trAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////6Av//+kn///kE///6Af//+gH/9CIA/9ASAP+l
        SgH/UBIB/yAMAf9ARAH+REQC/0YABP6AAASAgAAKLIAAEYAAABUAAAAjAAAAJwAAAJ8AAAAXAAAAF4AA
        BS9C/9CXiAAEL0L///////////////////8=
</value>
  </data>
</root>